==================================================================
= Grade Report
= Net ID: szhao28
==================================================================
= Base Grade: 75 points
= Point Adjustments: -4
==================================================================
= Final Grade: 71
==================================================================
= Comments
==================================================================

LetExp messages
-------------

-   (-3):
            You do not perform simultaneous assignment of the expressions being
            defined for the `LetExp`. Instead, you bind one of them, then
            evaluate the next one in the new environment. This means that later
            bindings in the `LetExp` have access to earlier bindings.

ProcedureStmt messages
-------------

-   (-0):
            This is the perfect time to use an as-pattern so you do not have to
            reconstruct the `ProcedureStmt` that you just de-constructed:

            exec ps@(ProcedureStmt p _ _) penv env = ("", H.insert p ps penv, env)

            Notice how we are able to pattern match the parts of `ProcedureStmt`
            that we are interested in (the `p` part), but that we can also give
            a name (`ps`) to the whole thing as well.

CallStmt messages
-------------

-   (-1):
            You hardcoded the error message for a failed lookup instead of
            saying the function that failed to lookup.

==================================================================
= Autograder Output
==================================================================

Passed Test: "print 1;"
Passed Test: "x := 44;"
Passed Test: "if true then print 1; else print 0; fi;"
Passed Test: "if true then do x := 1; print x; od; else do x := 0; print x; od; fi;"
Passed Test: "print 1+2;"
Passed Test: "if true and true then print 1; else print 0; fi;"
Passed Test: "if (4 > 3) then print 1; else print 0; fi;"
Passed Test: "do x := let[x:=5] (if x > 3 then 1 else 0 fi) end; print x; od;"
Passed Test: "do f := fn[x,y] (x + y) end; print (apply f(1,2)); od;"
Passed Test: "do procedure foo() print 1; endproc call foo(); od;"
Passed Test: "do x := (if true then 1 else 0 fi); print x; od;"
Passed Test: "if true then print 1; else print 0; fi;"
Passed Test: "if true and true then print 1; else print 0; fi;"
Passed Test: "if true or true then print 1; else print 0; fi;"
Passed Test: "if false or true then print 1; else print 0; fi;"
Passed Test: "if (3+5 == 8) then print 1; else print 0; fi;"
Passed Test: "if (3*5 == 15) then print 1; else print 0; fi;"
Passed Test: "if false then print 1; else print 0; fi;"
Passed Test: "if false and true then print 1; else print 0; fi;"
Passed Test: "if (3+5 == 7) then print 1; else print 0; fi;"
Passed Test: "if (3*5 < 7) then print 1; else print 0; fi;"
Passed Test: "z := fn[x,y] (x + y) end;"
Passed Test: "do z := fn[x,y] (x + y) end; print z; od;"
Passed Test: "do z := fn[x,y] (x + y) end; print (apply z(1,2)); od;"
Failed Test: "do z := fn[x,y] (x + y) end; print (apply z()); od;"
Passed Test: "do z := fn[x,y] (x + y) end; print (apply f()); od;"
Passed Test: "do x := 7; f := fn[x] (x + x) end; print x; print (apply f(4)); print x; od;"
Passed Test: "procedure foo() print 1; endproc"
Passed Test: "do procedure foo() print 1; endproc call foo(); od;"
Failed Test: "call foo();"
Passed Test: "do print 5; print 7; od;"
Passed Test: "do x := 7; print x; procedure foo(x) do print x; x := 1; print x; od; endproc print x; call foo(37); print x; od;"
Passed Test: "do procedure foo(x) do x := 1; print x; od; endproc call foo(37); od;"
Passed Test: "do procedure foo(x) do x := 1; print x; od; endproc call foo(); od;"
Failed Test: "do procedure foo() do x := 1; print x; od; endproc call bar(); od;"
Passed Test: "do procedure foo() do x := 1; print x; od; endproc call foo(); od;"
Passed Test: "do procedure foo() do x := 1; print x; od; endproc print foo; od;"
Passed Test: "if (3+5 == 8) then do print 4; print 4; od; else print 7; fi;"
Passed QuickChecks for Basic QuickCheck (5000).
Passed QuickChecks for Basic QuickCheck (5000).
Passed QuickChecks for Basic QuickCheck (5000).

==================================================================
= Original Code
==================================================================

{-----------------------------------
 - Interpreter.hs
 - v1.0
 -----------------------------------}

module Interpreter where

-- Language Representation
import Data.HashMap.Strict as H
import Text.ParserCombinators.Parsec
import Parser

fixMe = error "fix me!"

liftIntOp op (IntVal x) (IntVal y) = IntVal $ op x y
liftIntOp _ _ _ = ExnVal "Cannot lift"

liftBoolOp op (BoolVal x) (BoolVal y) = BoolVal $ op x y
liftBoolOp _ _ _ = ExnVal "Cannot lift"

liftCompOp :: (Int -> Int -> Bool) -> Val -> Val -> Val
liftCompOp op (IntVal x) (IntVal y) = BoolVal $ op x y
liftCompOp _ _ _ = ExnVal "Cannot lift"

{-----------------------------------
 - eval: The Evaluator
 -----------------------------------}
eval :: Exp -> Env -> Val
eval (IntExp x) _ = IntVal x

eval (BoolExp x) _ = BoolVal x

eval (VarExp s) env = 
        case (H.lookup s env) of
           Just v -> v
           Nothing -> ExnVal "No match in env"

eval (IntOpExp op a b) env = 
        case H.lookup op intOps of
             Just v -> let x = eval a env; y = eval b env in liftIntOp v x y
             Nothing -> ExnVal "No matching operator"

eval (BoolOpExp op a b) env =
        case H.lookup op boolOps of
            Just v -> let x = eval a env; y = eval b env in liftBoolOp v x y
            Nothing -> ExnVal "No matching operator"

eval (CompOpExp op a b) env =
        case H.lookup op compOps of
            Just v -> let x = eval a env; y = eval b env in liftCompOp v x y
            Nothing -> ExnVal "No matching operator"

eval (LetExp [] e2) env = eval e2 env        
eval (LetExp ((s,e1):xs) e2) env =
                let v1 = eval e1 env in eval (LetExp xs e2) (insert s v1 env)

eval (FunExp xx e1) env = CloVal xx e1 env      

eval (AppExp e1 xx) env =
    case (eval e1 env) of  -- e1 can be FunExp, VarExp, etc! Create pattern match exception
        CloVal v e3 cenv ->
            let arg = Prelude.map (flip eval env) xx  
            in case (compare (length v) (length xx)) of 
                GT -> CloVal (drop (length xx) v) e3 (union (fromList(zip (take (length xx) v) arg)) cenv)
                EQ -> eval e3 (union (fromList(zip v arg)) cenv)
        _ -> ExnVal "Expression not a closure."

eval (IfExp e1 e2 e3) env =
        case (eval e1 env) of 
            BoolVal True -> eval e2 env
            BoolVal False -> eval e3 env
            _ -> ExnVal "Guard is not a boolean."
{-----------------------------------
 - exec
 -----------------------------------}
exec :: Stmt -> PEnv -> Env -> Result
exec (PrintStmt e) penv env = (val, penv, env)
   where val = show $ eval e env
   
exec (SeqStmt []) penv env = ("", penv, env)
exec (SeqStmt (x:xs)) penv env = (s1++s2,penv',env')
   where (s1,penv'',env'') = exec x penv env
         (s2,penv',env') = exec (SeqStmt xs) penv'' env''

exec (IfStmt a s1 s2) penv env =            -- Notice: exp a instead of BoolOpExp! Could be other expressions!!
                    case (eval a env) of 
                         BoolVal True -> exec s1 penv env
                         BoolVal False -> exec s2 penv env
                         _ -> ("Guard is not a boolean.", penv, env)
                         
exec (SetStmt s e) penv env = ("",penv,insert s (eval e env) env)

exec (ProcedureStmt f ps body) penv env = ("",insert f (ProcedureStmt f ps body) penv,env)

exec (CallStmt name arg) penv env =
     case (H.lookup name penv) of
          (Just (ProcedureStmt f ps body)) -> 
                let val = Prelude.map (flip eval env) arg
                in exec body penv (union (fromList(zip ps val)) env)
          Nothing -> ("Procedure f undefined",penv,env)
        
        
        
        
{-----------------------------------
 - repl
 -----------------------------------}
repl :: PEnv -> Env -> [String] -> String -> IO Result
repl penv env [] _ =
  do putStr "> "
     input <- getLine
     case parse stmt "stdin" input of
        Right QuitStmt -> do putStrLn "Bye!"
                             return ("",penv,env)
        Right x -> let (nuresult,nupenv,nuenv) = exec x penv env
                   in do {
                     putStrLn nuresult;
                     repl nupenv nuenv [] "stdin"
                   }
        Left x -> do putStrLn $ show x
                     repl penv env [] "stdin"

main = do
  putStrLn "Welcome to your interpreter!"
  repl H.empty H.empty [] "stdin"
